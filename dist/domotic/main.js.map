{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dashboard/components/device/device.component.html","webpack:///./src/app/dashboard/components/device/device.component.scss","webpack:///./src/app/dashboard/components/device/device.component.ts","webpack:///./src/app/dashboard/components/devices/devices.component.html","webpack:///./src/app/dashboard/components/devices/devices.component.scss","webpack:///./src/app/dashboard/components/devices/devices.component.ts","webpack:///./src/app/dashboard/components/settings/settings.component.html","webpack:///./src/app/dashboard/components/settings/settings.component.scss","webpack:///./src/app/dashboard/components/settings/settings.component.ts","webpack:///./src/app/dashboard/container/dashboard-view/dashboard-view.component.html","webpack:///./src/app/dashboard/container/dashboard-view/dashboard-view.component.scss","webpack:///./src/app/dashboard/container/dashboard-view/dashboard-view.component.ts","webpack:///./src/app/dashboard/dashboard.module.ts","webpack:///./src/app/dashboard/services/device.service.ts","webpack:///./src/app/shared/models/notification.model.ts","webpack:///./src/app/shared/notification/notification.component.html","webpack:///./src/app/shared/notification/notification.component.scss","webpack:///./src/app/shared/notification/notification.component.ts","webpack:///./src/app/shared/services/notification.service.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/http-interceptor/index.ts","webpack:///./src/http-interceptor/noop-interceptor.ts","webpack:///./src/main.ts","webpack:///./src/routes/routes.ts","webpack:///./src/store/store.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<div class=\\\"main container\\\">\\r\\n  <router-outlet></router-outlet>\\r\\n</div>\\r\\n<app-notification></app-notification>\\r\\n\"","module.exports = \"div.main {\\n  padding-top: 70px;\\n  padding-bottom: 70px;\\n  position: relative; }\\n\"","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'domotic';\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { httpInterceptorProviders } from \"./../http-interceptor\";\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { appRoutes } from '../routes/routes';\r\nimport { DashboardModule } from './dashboard/dashboard.module';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    SharedModule,\r\n    DashboardModule\r\n  ],\r\n  providers: [httpInterceptorProviders],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"<div class=\\\"card\\\" [class.off]=\\\"device.SubType === 'Switch' && device.Status === 'Off'\\\" (click)=\\\"handleClick()\\\">\\r\\n  <div class=\\\"card-body pr-3 pl-3 pt-2 pb-2\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col pr-2 pl-2\\\">\\r\\n        <img src=\\\"assets/images/{{device.TypeImg}}.png\\\" class=\\\"device-img\\\" alt=\\\"device icon\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row mt-2\\\">\\r\\n      <div class=\\\"col pr-2 pl-2 device-name\\\">\\r\\n        <span *ngIf=\\\"!devicesEditable; else editDescription\\\" class=\\\"\\\">\\r\\n          {{ device.Description }}\\r\\n        </span>\\r\\n        <ng-template #editDescription>\\r\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{device.Description}}\\\" (focusout)=\\\"handleFocusOutDescription($event)\\\">\\r\\n        </ng-template>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col pr-2 pl-2 device-name\\\">\\r\\n        <span *ngIf=\\\"!devicesEditable; else editName\\\" class=\\\"\\\">\\r\\n          {{ device.Name }}\\r\\n        </span>\\r\\n        <ng-template #editName>\\r\\n            <input id=\\\"deviceName\\\" type=\\\"text\\\" class=\\\"form-control\\\" value=\\\"{{device.Name}}\\\" (focusout)=\\\"handleFocusOutName($event)\\\">\\r\\n        </ng-template>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col pr-2 pl-2 font-weight-light\\\">\\r\\n        {{ device.Data }}\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","module.exports = \"div.card {\\n  cursor: pointer;\\n  border-radius: 10px; }\\n  div.card.off {\\n    background-color: rgba(255, 255, 255, 0.6); }\\n  div.card img.device-img {\\n    height: 30px; }\\n  div.card .form-control {\\n    background-image: linear-gradient(0deg, #3f51b5 2px, rgba(63, 81, 181, 0) 0), linear-gradient(0deg, rgba(0, 0, 0, 0.26) 1px, transparent 0);\\n    font-size: .875rem; }\\n  div.card .form-control:focus {\\n      box-shadow: none; }\\n  div.card .device-name {\\n    text-overflow: ellipsis; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Store, DefaultStoreDataNames } from 'src/store/store';\r\nimport { DeviceService } from '../../services/device.service';\r\nimport { Device } from '../../models/device.model';\r\n\r\n@Component({\r\n  selector: 'app-device',\r\n  templateUrl: './device.component.html',\r\n  styleUrls: ['./device.component.scss']\r\n})\r\nexport class DeviceComponent implements OnInit {\r\n\r\n  @Input()\r\n  device: Device;\r\n\r\n  devicesEditable: boolean;\r\n\r\n  constructor(private deviceService: DeviceService, private store: Store) { }\r\n\r\n  ngOnInit() {\r\n    console.log(this.device)\r\n    this.store.select<boolean>(DefaultStoreDataNames.DEVICES_EDITABLE)\r\n    .subscribe(devicesEditable => this.devicesEditable = devicesEditable);\r\n  }\r\n\r\n  handleClick(): void{\r\n    if(this.deviceService.isSwitchType(this.device) && !this.devicesEditable)\r\n      this.deviceService.switchState(this.device).subscribe();\r\n  }\r\n\r\n  handleFocusOutName(event: any): void {\r\n    this.deviceService.updateName(this.device, event.target.value).subscribe();\r\n  }\r\n\r\n  handleFocusOutDescription(event: any): void {\r\n    this.deviceService.updateDescription(this.device, event.target.value).subscribe();\r\n  }\r\n\r\n}\r\n","module.exports = \"<div *ngIf=\\\"devices$ | async; let devices\\\" class=\\\"row pr-2 pl-2\\\">\\r\\n  <div *ngFor=\\\"let device of devices.result\\\" class=\\\"p-1 col-4 col-lg-2 mt-2\\\">\\r\\n    <app-device [device]=\\\"device\\\"></app-device>\\r\\n  </div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Store, DefaultStoreDataNames } from 'src/store/store';\r\nimport { Devices } from '../../models/devices.model';\r\n\r\n@Component({\r\n  selector: 'app-devices',\r\n  templateUrl: './devices.component.html',\r\n  styleUrls: ['./devices.component.scss']\r\n})\r\nexport class DevicesComponent implements OnInit {\r\n\r\n  devices$: Observable<Devices> \r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit() {\r\n    this.devices$ = this.store.select<Devices>(DefaultStoreDataNames.DEVICES);\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"settings\\\">\\r\\n    <a *ngIf=\\\"!(devicesEditable$ | async); else saveBtn\\\" class=\\\"btn btn-secondary btn-edit mr-3\\\" (click)=\\\"handleClickEdit()\\\">Modifier</a>\\r\\n    <ng-template #saveBtn>\\r\\n      <a class=\\\"btn btn-secondary btn-edit mr-3\\\" (click)=\\\"handleClickSave()\\\">Ok</a>\\r\\n    </ng-template>\\r\\n    <a href=\\\"http://raspberry:8080/#/Hardware\\\" class=\\\"btn btn-secondary btn-add\\\">+</a>\\r\\n</div>\"","module.exports = \"div.settings {\\n  position: absolute;\\n  right: 10px;\\n  top: 10px; }\\n  div.settings a {\\n    background-color: rgba(0, 0, 0, 0.4);\\n    color: #eeeeee;\\n    font-weight: 100;\\n    text-transform: none; }\\n  div.settings a.btn-add {\\n      border-radius: 100%;\\n      font-size: 22px;\\n      padding: 0px 10px; }\\n  div.settings a.btn-edit {\\n      font-size: 16px;\\n      border-radius: 20px;\\n      padding: 2px 16px; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Store, DefaultStoreDataNames } from 'src/store/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.scss']\r\n})\r\nexport class SettingsComponent implements OnInit {\r\n\r\n  devicesEditable$: Observable<boolean>;\r\n\r\n  constructor(private store: Store) { }\r\n\r\n  ngOnInit() {\r\n    this.devicesEditable$ = this.store.select<boolean>(DefaultStoreDataNames.DEVICES_EDITABLE);\r\n  }\r\n\r\n  handleClickEdit(): void {\r\n    this.store.set(DefaultStoreDataNames.DEVICES_EDITABLE, true);\r\n  }\r\n\r\n  handleClickSave(): void {\r\n    this.store.set(DefaultStoreDataNames.DEVICES_EDITABLE, false);\r\n  }\r\n\r\n}\r\n","module.exports = \"<app-settings></app-settings>\\r\\n<app-devices></app-devices>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { DeviceService } from '../../services/device.service';\r\n\r\n@Component({\r\n  selector: 'app-dashboard-view',\r\n  templateUrl: './dashboard-view.component.html',\r\n  styleUrls: ['./dashboard-view.component.scss']\r\n})\r\nexport class DashboardViewComponent implements OnInit {\r\n\r\n  constructor(private deviceService: DeviceService) { }\r\n\r\n  ngOnInit() {\r\n    this.deviceService.getDevices().subscribe();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DashboardViewComponent } from './container/dashboard-view/dashboard-view.component';\r\nimport { DevicesComponent } from './components/devices/devices.component';\r\nimport { DeviceComponent } from './components/device/device.component';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { SettingsComponent } from './components/settings/settings.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DragDropModule\r\n  ],\r\n  declarations: [DashboardViewComponent, DevicesComponent, DeviceComponent, SettingsComponent]\r\n})\r\nexport class DashboardModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { Device } from '../models/device.model';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Devices } from '../models/devices.model';\r\nimport { DefaultStoreDataNames, Store } from 'src/store/store';\r\nimport { map } from 'rxjs/operators';\r\nimport { ActionResponse } from '../models/actionResponse.model';\r\nimport { NotificationService } from 'src/app/shared/services/notification.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DeviceService {\r\n\r\n  constructor(private http: HttpClient, private store: Store, private notificationService: NotificationService) { }\r\n\r\n  public getDevices(): Observable<Devices> {\r\n    const params = new HttpParams()\r\n    .set('type', 'devices')\r\n    .append('favorite', '1')\r\n    .append('filter', 'all')\r\n    .append('used', 'true');\r\n\r\n    return this.http.get<Devices>(environment.apiUrl, {\r\n      params: params,\r\n      observe: 'response'\r\n    }).pipe(map(response => {\r\n      this.store.set(DefaultStoreDataNames.DEVICES, response.body)\r\n      return response.body;\r\n    })\r\n    ) as Observable<Devices>\r\n  }\r\n\r\n  public getDevice(idx: string): Observable<Device> {\r\n    const params = new HttpParams()\r\n    .set('rid', idx)\r\n    .append('type', 'devices');\r\n\r\n    return this.http.get<Device>(environment.apiUrl, {params: params});\r\n  }\r\n\r\n  public switchState(device: Device): Observable<ActionResponse> {\r\n    const params = new HttpParams()\r\n    .set('type', 'command')\r\n    .append('param', 'switchlight')\r\n    .append('idx', device.idx)\r\n    .append('switchcmd', 'Toggle')\r\n\r\n    return this.http.get<ActionResponse>(environment.apiUrl, {params: params, observe: 'response'})\r\n    .pipe(map((response: HttpResponse<ActionResponse>) => {\r\n      if(response.body.status === 'OK') {\r\n        this.getDevices().subscribe();\r\n      } else {\r\n        this.notificationService.sendNotificationTemp(response.body.status + ': ' + response.body.title, 'danger');\r\n      }\r\n      return response.body;\r\n    })) as Observable<ActionResponse>;\r\n  }\r\n\r\n  public updateName(device: Device, newName: string): Observable<ActionResponse> {\r\n    const params = new HttpParams()\r\n    .set('type', 'setused')\r\n    .append('idx', device.idx)\r\n    .append('name', newName)\r\n    .append('used', 'true');\r\n\r\n    return this.http.get<ActionResponse>(environment.apiUrl, {params: params, observe: 'response'})\r\n    .pipe(map((response: HttpResponse<ActionResponse>) => {\r\n      if(response.body.status === 'OK') {\r\n        this.getDevices().subscribe();\r\n      } else {\r\n        this.notificationService.sendNotificationTemp(response.body.status + ': ' + response.body.title, 'danger');\r\n      }\r\n      return response.body;\r\n    }));\r\n  }\r\n\r\n  public updateDescription(device: Device, newDescription: string): Observable<ActionResponse> {\r\n    const params = new HttpParams()\r\n      .set('description', newDescription)\r\n      .append('idx', device.idx)\r\n      .append('name', device.Name)\r\n      .append('type', 'setused')\r\n      .append('used', 'true');\r\n    \r\n    return this.http.get<ActionResponse>(environment.apiUrl, {params: params, observe: 'response'})\r\n    .pipe(map((response: HttpResponse<ActionResponse>) => {\r\n      if(response.body.status === 'OK') {\r\n        this.getDevices().subscribe();\r\n      } else {\r\n        this.notificationService.sendNotificationTemp(response.body.status + ': ' + response.body.title, 'danger');\r\n      }\r\n      return response.body;\r\n    })) \r\n  }\r\n\r\n  public isSwitchType(device: Device): boolean {\r\n    return device.SwitchType === \"On/Off\" || device.SwitchType === \"Dimmer\";\r\n  }\r\n}\r\n","export class Notification {\r\n    type: string;\r\n    message: string;\r\n    displayed: boolean;\r\n\r\n    constructor(message: string, type: string) {\r\n        this.message = message;\r\n        this.type = type;\r\n        this.displayed = true;\r\n    }\r\n}\r\n","module.exports = \"<div *ngIf=\\\"notification?.displayed\\\" class=\\\"notification alert fixed-bottom m-4 alert-{{notification?.type}}\\\"\\r\\n  role=\\\"alert\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    {{notification?.message}}\\r\\n  </div>\\r\\n</div>\"","module.exports = \".notification {\\n  box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.2); }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { Notification } from '../models/notification.model';\r\nimport { NotificationService } from '../services/notification.service';\r\n\r\n@Component({\r\n  selector: 'app-notification',\r\n  templateUrl: './notification.component.html',\r\n  styleUrls: ['./notification.component.scss']\r\n})\r\nexport class NotificationComponent implements OnInit {\r\n\r\n  public notification: Notification;\r\n\r\n  constructor(private notificationService: NotificationService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.notificationService.notificationSubject.subscribe(\r\n      notification => this.notification = notification\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Notification } from '../models/notification.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class NotificationService {\r\n\r\n  public notification: Notification;\r\n  public notificationSubject = new Subject<Notification>();\r\n\r\n  constructor() { }\r\n\r\n  sendNotificationTemp(message: string, type: string) {\r\n    this.notification = new Notification(message, type);\r\n    this.emitNotificationSubject();\r\n    setTimeout(() => {\r\n      this.notification.displayed = false;\r\n    }, 4000);\r\n  }\r\n\r\n  emitNotificationSubject() {\r\n    this.notificationSubject.next(this.notification);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NotificationComponent } from './notification/notification.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { Store } from 'src/store/store';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [\r\n    Store\r\n  ],\r\n  declarations: [NotificationComponent],\r\n  exports: [\r\n    NotificationComponent,\r\n    HttpClientModule\r\n  ]\r\n})\r\nexport class SharedModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiUrl: 'http://raspberry:8080/json.htm'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { NoopInterceptor } from './noop-interceptor';\r\n\r\nexport const httpInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: NoopInterceptor, multi: true },\r\n];\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from \"@angular/common/http\";\r\nimport { Observable, of } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { NotificationService } from \"src/app/shared/services/notification.service\";\r\n\r\n@Injectable()\r\nexport class NoopInterceptor implements HttpInterceptor {\r\n  constructor(private notificationService: NotificationService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(catchError((error, caught) => {\r\n      console.warn(error);\r\n      if (error.error instanceof ErrorEvent) {\r\n        this.notificationService.sendNotificationTemp(\r\n          `Error ${error.status}: ${error.error.error}`,\r\n          \"danger\"\r\n        );\r\n      } else if (error.error && error.error.message) {\r\n        this.notificationService.sendNotificationTemp(\r\n          `Error ${error.status}: ${error.error.message}`,\r\n          \"danger\"\r\n        );\r\n      } else if( error.error instanceof ProgressEvent) {\r\n        this.notificationService.sendNotificationTemp(\r\n          `Error ${error.status}: ${error.message}`,\r\n          \"danger\"\r\n        );\r\n      } else {\r\n        this.notificationService.sendNotificationTemp(\r\n          `Error ${error.status}: ${error.error}`,\r\n          \"danger\"\r\n        );\r\n      }\r\n      return of(error);\r\n    }) as any);\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n\r\n","import { Routes } from \"@angular/router\";\r\nimport { DashboardViewComponent } from \"src/app/dashboard/container/dashboard-view/dashboard-view.component\";\r\n\r\nexport const appRoutes: Routes = [\r\n  { path: \"\", component: DashboardViewComponent },\r\n  { path: \"**\", redirectTo: \"\"}\r\n];\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\nimport { State } from './state';\r\nimport { distinctUntilChanged } from 'rxjs/operators';\r\nimport { pluck } from 'rxjs/operators';\r\n\r\nconst initState: State = {\r\n    devices: undefined,\r\n    devicesEditable: false\r\n};\r\n\r\nexport enum DefaultStoreDataNames {\r\n    DEVICES = \"devices\",\r\n    DEVICES_EDITABLE = \"devicesEditable\"\r\n}\r\n\r\nexport class Store {\r\n\r\n    private subject = new BehaviorSubject<State>(initState);\r\n    private store = this.subject.asObservable().pipe(distinctUntilChanged());\r\n\r\n    get value() {\r\n        return this.subject.value;\r\n    }\r\n\r\n    select<T>(name: string): Observable<T> {\r\n        return this.store.pipe(pluck(name));\r\n    }\r\n\r\n    set(name: string, state: any) {\r\n        this.subject.next({\r\n            ...this.value, [name]: state\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""}